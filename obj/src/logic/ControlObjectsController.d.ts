import { ConfigParams } from 'pip-services3-commons-node';
import { IConfigurable } from 'pip-services3-commons-node';
import { IReferences } from 'pip-services3-commons-node';
import { IReferenceable } from 'pip-services3-commons-node';
import { FilterParams } from 'pip-services3-commons-node';
import { PagingParams } from 'pip-services3-commons-node';
import { DataPage } from 'pip-services3-commons-node';
import { ICommandable } from 'pip-services3-commons-node';
import { CommandSet } from 'pip-services3-commons-node';
import { ControlObjectV1 } from '../data/version1/ControlObjectV1';
import { IControlObjectsController } from './IControlObjectsController';
export declare class ControlObjectsController implements IConfigurable, IReferenceable, ICommandable, IControlObjectsController {
    private static _defaultConfig;
    private _dependencyResolver;
    private _groupsClient;
    private _groupsConnector;
    private _devicesClient;
    private _devicesConnector;
    private _zonesClient;
    private _zonesConnector;
    private _eventRulesClient;
    private _eventRulesConnector;
    private _persistence;
    private _commandSet;
    configure(config: ConfigParams): void;
    setReferences(references: IReferences): void;
    getCommandSet(): CommandSet;
    getObjects(correlationId: string, filter: FilterParams, paging: PagingParams, callback: (err: any, page: DataPage<ControlObjectV1>) => void): void;
    getObjectById(correlationId: string, id: string, callback: (err: any, object: ControlObjectV1) => void): void;
    createObject(correlationId: string, obj: ControlObjectV1, callback: (err: any, obj: ControlObjectV1) => void): void;
    updateObject(correlationId: string, obj: ControlObjectV1, callback: (err: any, obj: ControlObjectV1) => void): void;
    deleteObjectById(correlationId: string, id: string, callback: (err: any, obj: ControlObjectV1) => void): void;
    setDevice(correlationId: string, object_id: string, device_id: string, callback: (err: any, obj: ControlObjectV1) => void): void;
    unsetDevice(correlationId: string, object_id: string, callback: (err: any, obj: ControlObjectV1) => void): void;
    addGroup(correlationId: string, object_id: string, group_id: string, callback: (err: any, obj: ControlObjectV1) => void): void;
    removeGroup(correlationId: string, object_id: string, group_id: string, callback: (err: any, obj: ControlObjectV1) => void): void;
}
